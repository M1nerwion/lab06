name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  rabota:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            cpack_flag: WIX
            extension: msi
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cpack_flag: DEB
            extension: deb
          - os: ubuntu-latest
            cpack_flag: RPM
            extension: rpm
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            cpack_flag: DragNDrop
            extension: dmg
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl  

    steps:
    - uses: actions/checkout@v4
      with:
       submodules: recursive

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y cmake
        sudo apt-get install rpm

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # - name: Configure CMake
    #   run: cmake  -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    # - name: Build
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Create deb package
      working-directory: ${{github.workspace}}/build
      run: cpack -G ${{ matrix.cpack_flag }}
      # rules:
      # - if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     cpack -G DEB 
      #     cpack -G RPM
      # - if: matrix.os == 'windows-latest'
      #   run: |
      #     cpack -G WIX
      # - if: matrix.os == 'macos-latest'
      #   run: |
      #     cpack -G DragNDrop
         
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
          name: ${{ matrix.os }}-${{ matrix.extension }}-pack
          path: build/*.${{ matrix.extension }}
      # with:
      #   name:
      #     if eq(${{matrix.os}}, 'ubuntu-latest'){
      #       ubuntu-pack
      #     } elseif eq(${{matrix.os}}, windows-latest){
      #       win-pack
      #     } else {
      #       macos-pack
      #     }
      #   path:
      #     if eq(${{matrix.os}}, ubuntu-latest){
      #       build/*.deb
      #       build/*.rpm
      #     } elseif eq(${{matrix.os}}, windows-latest){
      #       build/*.msi
      #     } else {
      #       build/*.dmg
      #     } 

  create_release:
    needs: [rabota]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: download_ubuntu_deb
      uses: actions/download-artifact@v4
      with:
        name: ubuntu-latest-deb-pack
        path: artifacts/linux

    - name: download_ubuntu_rpm
      uses: actions/download-artifact@v4
      with:
        name: ubuntu-latest-rpm-pack
        path: artifacts/linux

    - name: download_windows
      uses: actions/download-artifact@v4
      with:
        name: windows-latest-msi-pack
        path: artifacts/windows

    - name: download_macos
      uses: actions/download-artifact@v4 
      with:
        name: macos-latest-dmg-pack
        path: artifacts/macos

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v1.${{ github.run_number }}
        name: Release v1.${{ github.run_number }}
        files: |
          artifacts/linux/*.deb
          artifacts/linux/*.rpm
          artifacts/windows/*.msi
          artifacts/macos/*.dmg 
          

    # - name: Create Release
    #   if: matrix.os == 'ubuntu-latest'
    #   uses: softprops/action-gh-release@v2
    #   with:
    #     tag_name: v1.${{ github.run_number }}
    #     name: Release v1.${{ github.run_number }}
    #     files: build/*.deb
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

